// //Question 1 
//Write a function calculateCube that takes a single number and prints the volume of a cube made from that number.

 const calculateCube = (n) => {
  console.log(n*n*n)
}
calculateCube(5)

//Question 2 
//Write a function isAVowel that takes a character (i.e. a string of length 1) and returns true if it is a vowel, false otherwise. The vowel could be upper or lower case.

let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];
const isAVowel = (letter) => {
  if (vowels.indexOf(letter.toLowerCase()) !== -1) {
    return true;
  }
  return false;
}
console.log(isAVowel('a'));

//Question 3 
//Write a function getTwoLengths that accepts two parameters (strings). The function should return an array of numbers where each number is the length of the corresponding string.

const getTwoLengths = (string1,string2) => {
  let arr = [string1.split('').length, string2.split('').length]
  return arr
}

getTwoLengths('What are you doing', 'Nothing')

//Question 4 
//Write a function getMultipleLengths that accepts a single parameter as an argument: an array of strings. The function should return an array of numbers where each number is the length of the corresponding string.

const getMultipleLengths = (string1, string2, string3, string4, string5) => {
    let arr = [string1.split('').length, string2.split('').length, string3.split('').length, string4.split('').length, string5.split('').length]
  return arr
}

 console.log(getMultipleLengths('hello', 'what', 'is', 'up', 'dude'))

//Problem solving with Functions pt 2

//Question 1 
//Define a function maxOfThree that takes three numbers as arguments and returns the largest of them. If all numbers are the same, it doesn't matter which one is returned. If the two largest numbers are the same, one of them should be returned.

const maxOfThree = (num1, num2, num3) => {
    console.log(Math.max(num1,num2,num3))
}

maxOfThree(2, 10, 7)

// Question 2 
//Write a function printLongestWord that accepts a single argument, an array of strings. The method should return the longest word in the array. In case of a tie, the method should return the word that appears first in the array.

let arr = ['BoJack', 'Princess', 'Diane', 'a', 'Max', 'Peanutbutter', 'big', 'blob']
function printLongestWord(word) {
  let word1 = word[0]
    for (i = 0; i < word.length; i++) {
    if (word[i].length > word1.length) {
      word1 = word[i];
    }
  }
  return word1;
}
console.log(printLongestWord(arr));

// Question 3 
//Write a Javascript function called transmogrify. This function should accept three arguments, which you can assume will be numbers. Your function should return the "transmogrified" result.

//The transmogrified result of three numbers is the product of the first two numbers, raised to the power of the third number.

const transmogrify = (num1,num2,num3) => {
    let newNum = num1 * num2;
    let newNum2 = Math.pow(newNum,num3)
return newNum2;
}
transmogrify(2,3,4)


// Question 4 
//Write a function that takes a parameter, a number. The function should print the Fibonacci sequence up to that number.

//Adjust the function to push the even numbered values into an array.

//Adjust the function to return the summed value of the array.

//Find the sum of the even numbered values that do not exceed four million.

const fibonacci = (num) => {
    const fibArray = [0,1]
    for(let i = 2; i <= num; i++){
        const prevNum1 = fibArray[i-1]
        const prevNum2 = fibArray [i-2]
        fibArray.push(prevNum1 + prevNum2)
    }
    return fibArray[num]
}

fibonacci(20)

//Question 5
//Can you find the needle in the haystack?

//Write a function findNeedle() that takes an array full of junk but contains one "needle"

//After your function finds the needle it should return a message (as a string) that says:

//"found the needle at postition" plus the index it found the needle so:

const findNeedle = (haystack) => {
    
  return "found the needle at position " + haystack.indexOf("needle");
}

findNeedle(['hay', 'junk', 'hay', 'hay', 'moreJunk', 'needle', 'randomJunk'])

// Question 6 
//Given an array, return the sum of only the positive numbers

const SummPositive = (numbers) => {
  var negatives = [];
  var sum = 0;

  for(var i = 0; i < numbers.length; i++) {
    if(numbers[i] < 0) {
      negatives.push(numbers[i]);
    }else{
      sum += numbers[i];
    }
  }

  console.log(negatives);

  return sum;
}

var sum_result = SummPositive( [ 1, -4, 7, 12] );

console.log(sum_result);